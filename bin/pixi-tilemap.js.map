{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/CanvasTileRenderer.js","src/CompositeRectTileLayer.js","src/GraphicsLayer.js","src/RectTileLayer.js","src/RectTileShader.js","src/SquareTileShader.js","src/TileRenderer.js","src/ZLayer.js","src/index","src/shaderGenerator.js"],"names":[],"mappingsvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjthFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-tilemap.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function CanvasTileRenderer(renderer) {\n    this.renderer = renderer;\n    this.tileAnim = [0, 0];\n}\n\nPIXI.CanvasRenderer.registerPlugin('tile', CanvasTileRenderer);\n\nmodule.exports = CanvasTileRenderer;\n","var RectTileLayer = require('./RectTileLayer');\n\nfunction CompositeRectTileLayer() {\n    PIXI.Container.apply(this, arguments);\n    this.initialize.apply(this, arguments);\n}\n\nCompositeRectTileLayer.prototype = Object.create(PIXI.Container.prototype);\nCompositeRectTileLayer.prototype.constructor = RectTileLayer;\nCompositeRectTileLayer.prototype.updateTransform = CompositeRectTileLayer.prototype.displayObjectUpdateTransform;\n\n//can be initialized multiple times\nCompositeRectTileLayer.prototype.initialize = function(zIndex, bitmaps, useSquare) {\n    this.z = this.zIndex = zIndex;\n    this.useSquare = useSquare;\n    this.shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    this.tileAnim = [0, 0];\n    if (bitmaps) {\n        this.setBitmaps(bitmaps);\n    }\n};\n\nCompositeRectTileLayer.prototype.setBitmaps = function(bitmaps) {\n    this.removeChildren();\n    this.addChild(new RectTileLayer(this.zIndex, bitmaps));\n    this.modificationMarker = 0;\n};\n\nCompositeRectTileLayer.prototype.clear = function () {\n    for (var i=0;i<this.children.length;i++)\n        this.children[i].clear();\n    this.modificationMarker = 0;\n};\n\nCompositeRectTileLayer.prototype.addRect = function (num, u, v, x, y, tileWidth, tileHeight) {\n    if (this.children[num] && this.children[num].textures)\n        this.children[num].addRect(0, u, v, x, y, tileWidth, tileHeight);\n};\n\n/**\n * \"hello world!\" of pixi-tilemap library. Pass it texture and it will be added\n * @param texture\n * @param x\n * @param y\n * @returns {boolean}\n */\nCompositeRectTileLayer.prototype.addFrame = function (texture, x, y) {\n    if (typeof texture === \"string\") {\n        texture = PIXI.Texture.fromImage(texture);\n    }\n    var children = this.children;\n    var layer = null, ind = 0;\n    for (var i=0;i<children.length; i++) {\n        var tex = children[i].textures;\n        for (var j=0;j < tex.length;j++) {\n            if (tex[j].baseTexture == texture.baseTexture) {\n                layer = children[i];\n                ind = j;\n                break;\n            }\n        }\n        if (layer) {\n            break;\n        }\n    }\n    if (!layer) {\n        for (i=0;i<children.length;i++) {\n            var child = children[i];\n            if (child.textures.length < 16) {\n                layer = child;\n                ind = child.textures.length;\n                child.textures.push(texture);\n            }\n        }\n        if (!layer) {\n            children.push(layer = new RectTileLayer(this.zIndex, texture));\n            ind = 0;\n        }\n    }\n    layer.addRect(ind, texture.frame.x, texture.frame.y, x, y, texture.frame.width, texture.frame.height);\n    return true;\n};\n\nCompositeRectTileLayer.prototype.renderCanvas = function (renderer) {\n    if (!renderer.dontUseTransform) {\n        var wt = this.worldTransform;\n        renderer.context.setTransform(\n            wt.a,\n            wt.b,\n            wt.c,\n            wt.d,\n            wt.tx * renderer.resolution,\n            wt.ty * renderer.resolution\n        );\n    }\n    var layers = this.children;\n    for (var i = 0; i < layers.length; i++) {\n        layers[i].renderCanvas(renderer);\n        layers[i].tileAnim = this.tileAnim;\n    }\n};\n\n\nCompositeRectTileLayer.prototype.renderWebGL = function(renderer) {\n    var gl = renderer.gl;\n    var shader = renderer.plugins.tile.getShader(this.useSquare);\n    renderer.setObjectRenderer(renderer.plugins.tile);\n    renderer.bindShader(shader);\n    //TODO: dont create new array, please\n    this._globalMat = this._globalMat || new PIXI.Matrix();\n    renderer._activeRenderTarget.projectionMatrix.copy(this._globalMat).append(this.worldTransform);\n    shader.uniforms.projectionMatrix = this._globalMat.toArray(true);\n    shader.uniforms.shadowColor = this.shadowColor;\n    if (this.useSquare) {\n        var tempScale = this._tempScale = (this._tempScale || [0, 0]);\n        tempScale[0] = this._globalMat.a >= 0?1:-1;\n        tempScale[1] = this._globalMat.d < 0?1:-1;\n        var ps = shader.uniforms.pointScale = tempScale;\n        shader.uniforms.projectionScale = Math.abs(this.worldTransform.a) * renderer.resolution;\n    }\n    // var af = shader.uniforms.animationFrame = renderer.plugins.tile.tileAnim;\n    var af = shader.uniforms.animationFrame = this.tileAnim;\n    //shader.syncUniform(shader.uniforms.animationFrame);\n    var layers = this.children;\n    for (var i = 0; i < layers.length; i++)\n        layers[i].renderWebGL(renderer, this.useSquare);\n};\n\nCompositeRectTileLayer.prototype.isModified = function(anim) {\n    var layers = this.children;\n    if (this.modificationMarker != layers.length) {\n        return true;\n    }\n    for (var i=0;i<layers.length;i++) {\n        if (layers[i].modificationMarker != layers[i].pointsBuf.length ||\n            anim && layers[i].hasAnim) {\n            return true;\n        }\n    }\n    return false;\n};\n\nCompositeRectTileLayer.prototype.clearModify = function() {\n    var layers = this.children;\n    this.modificationMarker = layers.length;\n    for (var i = 0; i < layers.length; i++) {\n        layers[i].modificationMarker = layers[i].pointsBuf.length;\n    }\n};\n\nmodule.exports = CompositeRectTileLayer;\n","function GraphicsLayer(zIndex) {\n    PIXI.Graphics.apply(this, arguments);\n    this.z = this.zIndex = zIndex;\n}\n\nGraphicsLayer.prototype = Object.create(PIXI.Graphics.prototype);\nGraphicsLayer.prototype.constructor = GraphicsLayer;\nGraphicsLayer.prototype.renderCanvas = function (renderer) {\n    var wt = null;\n    if (renderer.dontUseTransform) {\n        wt = this.transform.worldTransform;\n        this.transform.worldTransform = PIXI.Matrix.IDENTITY;\n    }\n    renderer.plugins.graphics.render(this);\n    if (renderer.dontUseTransform) {\n        this.transform.worldTransform = wt;\n    }\n    renderer.context.globalAlpha = 1.0;\n};\nGraphicsLayer.prototype.renderWebGL = function(renderer) {\n    if (!this._webGL[renderer.gl.id])\n        this.dirty = true;\n    PIXI.Graphics.prototype.renderWebGL.call(this, renderer);\n};\n\nGraphicsLayer.prototype.isModified = function(anim) {\n    return false;\n};\n\nGraphicsLayer.prototype.clearModify = function() {\n};\n\nmodule.exports = GraphicsLayer;\n","function RectTileLayer(zIndex, texture) {\n    PIXI.DisplayObject.apply(this, arguments);\n    this.initialize.apply(this, arguments);\n}\n\nRectTileLayer.prototype = Object.create(PIXI.DisplayObject.prototype);\nRectTileLayer.prototype.constructor = RectTileLayer;\n\nRectTileLayer.prototype.initialize = function(zIndex, textures) {\n    if (!textures) {\n        textures = [];\n    } else if (!(textures instanceof Array) && textures.baseTexture) {\n        textures = [textures];\n    }\n    this.textures = textures;\n    this.z = this.zIndex = zIndex;\n    this.pointsBuf = [];\n    this.visible = false;\n    this.tileAnim = [0,0];\n    this._tempSize = new Float32Array([0, 0]);\n    this._tempTexSize = 1;\n};\n\nRectTileLayer.prototype.clear = function () {\n    this.pointsBuf.length = 0;\n    this.modificationMarker = 0;\n    this.hasAnim = false;\n};\n\nRectTileLayer.prototype.renderCanvas = function (renderer) {\n    if (this.textures.length === 0) return;\n    var points = this.pointsBuf;\n    renderer.context.fillStyle = '#000000';\n    for (var i = 0, n = points.length; i < n; i += 9) {\n        var x1 = points[i], y1 = points[i+1];\n        var x2 = points[i+2], y2 = points[i+3];\n        var w = points[i+4];\n        var h = points[i+5];\n        x1 += points[i+6] * this.tileAnim[0];\n        y1 += points[i+7] * this.tileAnim[1];\n        var textureId = points[i+8];\n        if (textureId >= 0) {\n            renderer.context.drawImage(this.textures[textureId].baseTexture.source, x1, y1, w, h, x2, y2, w, h);\n        } else {\n            renderer.context.globalAlpha = 0.5;\n            renderer.context.fillRect(x2, y2, w, h);\n            renderer.context.globalAlpha = 1;\n        }\n    }\n};\n\nRectTileLayer.prototype.addRect = function (textureId, u, v, x, y, tileWidth, tileHeight, animX, animY) {\n    var pb = this.pointsBuf;\n    this.hasAnim = this.hasAnim || animX > 0 || animY > 0;\n    if (tileWidth == tileHeight) {\n        pb.push(u);\n        pb.push(v);\n        pb.push(x);\n        pb.push(y);\n        pb.push(tileWidth);\n        pb.push(tileHeight);\n        pb.push(animX | 0);\n        pb.push(animY | 0);\n        pb.push(textureId);\n    } else {\n        var i;\n        if (tileWidth % tileHeight === 0) {\n            //horizontal line on squares\n            for (i=0;i<tileWidth/tileHeight;i++) {\n                pb.push(u + i * tileHeight);\n                pb.push(v);\n                pb.push(x + i * tileHeight);\n                pb.push(y);\n                pb.push(tileHeight);\n                pb.push(tileHeight);\n                pb.push(animX | 0);\n                pb.push(animY | 0);\n                pb.push(textureId);\n            }\n        } else if (tileHeight % tileWidth === 0) {\n            //vertical line on squares\n            for (i=0;i<tileHeight/tileWidth;i++) {\n                pb.push(u);\n                pb.push(v + i * tileWidth);\n                pb.push(x);\n                pb.push(y + i * tileWidth);\n                pb.push(tileWidth);\n                pb.push(tileWidth);\n                pb.push(animX | 0);\n                pb.push(animY | 0);\n                pb.push(textureId);\n            }\n        } else {\n            //ok, ok, lets use rectangle. but its not working with square shader yet\n            pb.push(u);\n            pb.push(v);\n            pb.push(x);\n            pb.push(y);\n            pb.push(tileWidth);\n            pb.push(tileHeight);\n            pb.push(animX | 0);\n            pb.push(animY | 0);\n            pb.push(textureId);\n        }\n    }\n};\n\nRectTileLayer.prototype.renderWebGL = function(renderer, useSquare) {\n    var points = this.pointsBuf;\n    if (points.length === 0) return;\n\n    var tile = renderer.plugins.tile;\n    var gl = renderer.gl;\n    var shader = tile.getShader(useSquare);\n    var textures = this.textures;\n    if (textures.length === 0) return;\n    var len = textures.length;\n    if (this._tempTexSize < shader.maxTextures) {\n        this._tempTexSize = shader.maxTextures;\n        this._tempSize = new Float32Array(2*shader.maxTextures);\n    }\n    // var samplerSize = this._tempSize;\n    for (var i=0;i<len;i++) {\n        if (!textures[i] || !textures[i].valid) return;\n        var texture = textures[i].baseTexture;\n        // samplerSize[i * 2] = 1.0 / texture.width;\n        // samplerSize[i * 2 + 1] = 1.0 / texture.height;\n    }\n    tile.bindTextures(renderer, textures);\n    // shader.uniforms.uSamplerSize = samplerSize;\n    //lost context! recover!\n    var vb = tile.getVb(this.vbId);\n    if (!vb) {\n        vb = tile.createVb(useSquare);\n        this.vbId = vb.id;\n        this.vbBuffer = null;\n        this.modificationMarker = 0;\n    }\n    var vao = vb.vao.bind();\n    vb = vb.vb;\n    //if layer was changed, re-upload vertices\n    vb.bind();\n    var vertices = points.length / 9 * shader.vertPerQuad;\n    if (this.modificationMarker != vertices) {\n        this.modificationMarker = vertices;\n        var vs = shader.stride * vertices;\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs) {\n            //!@#$ happens, need resize\n            var bk = shader.stride;\n            while (bk < vs) {\n                bk *= 2;\n            }\n            this.vbBuffer = new ArrayBuffer(bk);\n            this.vbArray = new Float32Array(this.vbBuffer);\n            this.vbInts = new Uint32Array(this.vbBuffer);\n            vb.upload(this.vbBuffer, 0, true);\n        }\n\n        var arr = this.vbArray, ints = this.vbInts;\n        //upload vertices!\n        var sz = 0;\n        //var tint = 0xffffffff;\n        var textureId, shiftU, shiftV;\n        if (useSquare) {\n            for (i = 0; i < points.length; i += 9) {\n                textureId = (points[i+8] >> 2);\n                shiftU = 1024 * (points[i+8] & 1);\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\n                arr[sz++] = points[i + 2];\n                arr[sz++] = points[i + 3];\n                arr[sz++] = points[i + 0] + shiftU;\n                arr[sz++] = points[i + 1] + shiftV;\n                arr[sz++] = points[i + 4];\n                arr[sz++] = points[i + 6];\n                arr[sz++] = points[i + 7];\n                arr[sz++] = textureId;\n            }\n        } else {\n            //var tint = 0xffffffff;\n            var tint = -1;\n            for (i = 0;i<points.length;i += 9) {\n                textureId = (points[i+8] >> 2);\n                shiftU = 1024 * (points[i+8] & 1);\n                shiftV = 1024 * ((points[i+8] >> 1) & 1);\n                var x = points[i+2], y = points[i+3];\n                var w = points[i+4], h = points[i+5];\n                var u = points[i] + shiftU, v = points[i+1] + shiftV;\n                var animX = points[i+6], animY = points[i+7];\n                arr[sz++] = x;\n                arr[sz++] = y;\n                arr[sz++] = u;\n                arr[sz++] = v;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n                arr[sz++] = x + w;\n                arr[sz++] = y;\n                arr[sz++] = u + w;\n                arr[sz++] = v;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n                arr[sz++] = x + w;\n                arr[sz++] = y + h;\n                arr[sz++] = u + w;\n                arr[sz++] = v + h;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n                arr[sz++] = x;\n                arr[sz++] = y;\n                arr[sz++] = u;\n                arr[sz++] = v;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n                arr[sz++] = x + w;\n                arr[sz++] = y + h;\n                arr[sz++] = u + w;\n                arr[sz++] = v + h;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n                arr[sz++] = x;\n                arr[sz++] = y + h;\n                arr[sz++] = u;\n                arr[sz++] = v + h;\n                arr[sz++] = animX;\n                arr[sz++] = animY;\n                arr[sz++] = textureId;\n            }\n        }\n        // if (vs > this.vbArray.length/2 ) {\n        vb.upload(arr, 0, true);\n        // } else {\n        //     var view = arr.subarray(0, vs);\n        //     vb.upload(view, 0);\n        // }\n    }\n    if (useSquare)\n        gl.drawArrays(gl.POINTS, 0, vertices);\n    else\n        gl.drawArrays(gl.TRIANGLES, 0, vertices);\n};\n\nmodule.exports = RectTileLayer;\n","var shaderGenerator = require('./shaderGenerator');\n\nfunction RectTileShader(gl, maxTextures)\n{\n    PIXI.Shader.call(this, gl,\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec2 aAnim;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\nuniform vec2 animationFrame;\\n\\nvarying vec2 vTextureCoord;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n   vTextureId = aTextureId;\\n}\\n\",\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying float vTextureId;\\nuniform vec4 shadowColor;\\nuniform sampler2D uSamplers[%count%];\\nuniform vec2 uSamplerSize[%count%];\\n\\nvoid main(void){\\n   vec2 textureCoord = vTextureCoord;\\n   vec4 color;\\n   %forloop%\\n   gl_FragColor = color;\\n}\\n\")\n    );\n    this.maxTextures = maxTextures;\n    this.vertSize = 7;\n    this.vertPerQuad = 6;\n    this.stride = this.vertSize * 4;\n    shaderGenerator.fillSamplers(this, this.maxTextures);\n}\n\nRectTileShader.prototype = Object.create(PIXI.Shader.prototype);\nRectTileShader.prototype.constructor = RectTileShader;\nRectTileShader.prototype.createVao = function (renderer, vb) {\n    var gl = renderer.gl;\n    return renderer.createVao()\n        .addIndex(this.indexBuffer)\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 4 * 4)\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 6 * 4);\n};\n\nmodule.exports = RectTileShader;\n","var shaderGenerator = require('./shaderGenerator');\n\n\nfunction SquareTileShader(gl, maxTextures) {\n    PIXI.Shader.call(this, gl,\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec2 aAnim;\\nattribute float aTextureId;\\nattribute float aSize;\\n\\nuniform mat3 projectionMatrix;\\nuniform vec2 samplerSize;\\nuniform vec2 animationFrame;\\nuniform float projectionScale;\\n\\nvarying vec2 vTextureCoord;\\nvarying float vSize;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition + aSize * 0.5, 1.0)).xy, 0.0, 1.0);\\n   gl_PointSize = aSize * projectionScale;\\n   vTextureCoord = aTextureCoord + aAnim * animationFrame;\\n   vTextureId = aTextureId;\\n   vSize = aSize;\\n}\\n\",\n        shaderGenerator.generateFragmentSrc(maxTextures, \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying float vSize;\\nvarying float vTextureId;\\n\\nuniform vec4 shadowColor;\\nuniform sampler2D uSamplers[%count%];\\nuniform vec2 uSamplerSize[%count%];\\nuniform vec2 pointScale;\\n\\nvoid main(void){\\n   float margin = 1.0/vSize;\\n   vec2 clamped = vec2(clamp(gl_PointCoord.x, margin, 1.0 - margin), clamp(gl_PointCoord.y, margin, 1.0 - margin));\\n   vec2 textureCoord = ((clamped-0.5) * pointScale + 0.5) * vSize + vTextureCoord;\\n   vec4 color;\\n   %forloop%\\n   gl_FragColor = color;\\n}\\n\")\n    );\n    this.maxTextures = maxTextures;\n    this.vertSize = 8;\n    this.vertPerQuad = 1;\n    this.stride = this.vertSize * 4;\n    shaderGenerator.fillSamplers(this, this.maxTextures);\n}\n\nSquareTileShader.prototype = Object.create(PIXI.Shader.prototype);\nSquareTileShader.prototype.constructor = SquareTileShader;\nSquareTileShader.prototype.createVao = function (renderer, vb) {\n    var gl = renderer.gl;\n    return renderer.createVao()\n        .addIndex(this.indexBuffer)\n        .addAttribute(vb, this.attributes.aVertexPosition, gl.FLOAT, false, this.stride, 0)\n        .addAttribute(vb, this.attributes.aTextureCoord, gl.FLOAT, false, this.stride, 2 * 4)\n        .addAttribute(vb, this.attributes.aSize, gl.FLOAT, false, this.stride, 4 * 4)\n        .addAttribute(vb, this.attributes.aAnim, gl.FLOAT, false, this.stride, 5 * 4)\n        .addAttribute(vb, this.attributes.aTextureId, gl.FLOAT, false, this.stride, 7 * 4);\n};\n\nmodule.exports = SquareTileShader;\n","var RectTileShader = require('./RectTileShader'),\n    SquareTileShader = require('./SquareTileShader'),\n    glCore = PIXI.glCore;\n\n/*\n* Renderer for square and rectangle tiles.\n* Squares cannot be rotated, skewed.\n* For container with squares, scale.x must be equals to scale.y, matrix.a to matrix.d\n* Rectangles do not care about that.\n*\n* @class\n* @memberof PIXI.tilemap\n* @extends PIXI.ObjectRenderer\n* @param renderer {PIXI.WebGLRenderer} The renderer this sprite batch works for.\n*/\n\nfunction TileRenderer(renderer) {\n    PIXI.ObjectRenderer.call(this, renderer);\n    this.vbs = {};\n    this.lastTimeCheck = 0;\n    this.tileAnim = [0, 0];\n    this.maxTextures = 4;\n    this.indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n}\n\nTileRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\nTileRenderer.prototype.constructor = TileRenderer;\nTileRenderer.vbAutoincrement = 0;\n\nTileRenderer.prototype.onContextChange = function() {\n    var gl = this.renderer.gl;\n    var maxTextures = this.maxTextures;\n    this.rectShader = new RectTileShader(gl, maxTextures);\n    this.squareShader = new SquareTileShader(gl, maxTextures);\n    this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n    this.rectShader.indexBuffer = this.indexBuffer;\n    this.squareShader.indexBuffer = this.indexBuffer;\n    this.vbs = {};\n    this.glTextures = [];\n    this.boundSprites = [];\n    this.initBounds();\n};\n\nTileRenderer.prototype.initBounds = function() {\n    var gl = this.renderer.gl;\n    var tempCanvas = document.createElement('canvas');\n    tempCanvas.width = 2048;\n    tempCanvas.height = 2048;\n    // tempCanvas.getContext('2d').clearRect(0, 0, 2048, 2048);\n    for (var i=0;i<this.maxTextures; i++) {\n        var glt = new glCore.GLTexture(gl, 2048, 2048);\n        glt.premultiplyAlpha = true;\n        glt.upload(tempCanvas);\n        glt.enableWrapClamp();\n        glt.enableLinearScaling();\n        this.glTextures.push(glt);\n        var bs = [];\n        for (var j=0;j<4;j++) {\n            var spr = new PIXI.Sprite();\n            spr.position.x = 1024 * (j & 1);\n            spr.position.y = 1024 * (j >> 1);\n            bs.push(spr);\n        }\n        this.boundSprites.push(bs);\n    }\n};\n\nglCore.GLTexture.prototype._hackSubImage = function(sprite) {\n    this.bind();\n    var gl = this.gl;\n    var baseTex = sprite.texture.baseTexture;\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, sprite.position.x, sprite.position.y, this.format, this.type, baseTex.source);\n};\n\nTileRenderer.prototype.bindTextures = function(renderer, textures) {\n    var bounds = this.boundSprites;\n    var glts = this.glTextures;\n    var len = textures.length;\n    var maxTextures = this.maxTextures;\n    if (len >= 4 * maxTextures) {\n        return;\n    }\n    var i;\n    for (i=0;i<len;i++) {\n        var texture = textures[i];\n        renderer.bindTexture(texture);\n        if (!texture || !textures[i].valid) continue;\n        var bs = bounds[i >> 2][i & 3];\n        if (bs.texture !== texture) {\n            bs.texture = texture;\n            var glt = glts[ i >> 2 ];\n            glt._hackSubImage(bs);\n        }\n    }\n    for (i = 0; i < maxTextures; i++) {\n        glts[i].bind(i);\n    }\n    renderer._activeTextureLocation = maxTextures - 1;\n};\n\nTileRenderer.prototype.checkLeaks = function() {\n    var now = Date.now();\n    var old = now - 10000;\n    if (this.lastTimeCheck < old ||\n        this.lastTimeCheck > now) {\n        this.lastTimeCheck = now;\n        var vbs = this.vbs;\n        for (var key in vbs) {\n            if (vbs[key].lastTimeAccess < old) {\n                this.removeVb(key);\n            }\n        }\n    }\n};\n\nTileRenderer.prototype.start = function() {\n    this.renderer.state.setBlendMode( PIXI.BLEND_MODES.NORMAL );\n    //sorry, nothing\n};\n\nTileRenderer.prototype.getVb = function(id) {\n    this.checkLeaks();\n    var vb = this.vbs[id];\n    if (vb) {\n        vb.lastAccessTime = Date.now();\n        return vb;\n    }\n    return null;\n};\n\nTileRenderer.prototype.createVb = function(useSquare) {\n    var id = ++TileRenderer.vbAutoincrement;\n    var shader = this.getShader(useSquare);\n    var gl = this.renderer.gl;\n    var vb = PIXI.glCore.GLBuffer.createVertexBuffer(gl, null, gl.STREAM_DRAW);\n    var stuff = {\n        id: id,\n        vb: vb,\n        vao: shader.createVao(this.renderer, vb),\n        lastTimeAccess: Date.now(),\n        useSquare: useSquare,\n        shader: shader\n    };\n    this.vbs[id] = stuff;\n    return stuff;\n};\n\nTileRenderer.prototype.removeVb = function(id) {\n    if (this.vbs[id]) {\n        this.vbs[id].vb.destroy();\n        this.vbs[id].vao.destroy();\n        delete this.vbs[id];\n    }\n};\n\nTileRenderer.prototype.getShader = function(useSquare) {\n    return useSquare ? this.squareShader : this.rectShader;\n};\n\nTileRenderer.prototype.destroy = function () {\n    PIXI.ObjectRenderer.prototype.destroy.call(this);\n    this.rectShader.destroy();\n    this.squareShader.destroy();\n    this.rectShader = null;\n    this.squareShader = null;\n};\n\nPIXI.WebGLRenderer.registerPlugin('tile', TileRenderer);\n\nmodule.exports = TileRenderer;\n","function ZLayer() {\n    this.initialize.apply(this, arguments);\n}\n\nZLayer.prototype = Object.create(PIXI.Container.prototype);\nZLayer.prototype.initialize = function(tilemap, zIndex) {\n    PIXI.Container.apply(this, arguments);\n    this.tilemap = tilemap;\n    this.z = zIndex;\n};\n\nZLayer.prototype.clear = function() {\n    var layers = this.children;\n    for (var i=0; i<layers.length; i++)\n        layers[i].clear();\n    this._previousLayers = 0;\n};\n\nZLayer.prototype.cacheIfDirty = function() {\n    var tilemap = this.tilemap;\n    var layers = this.children;\n    var modified = this._previousLayers != layers.length;\n    this._previousLayers = layers.length;\n    var buf = this.canvasBuffer;\n    var tempRender = this._tempRender;\n    if (!buf) {\n        buf = this.canvasBuffer = document.createElement('canvas');\n        tempRender = this._tempRender = new PIXI.CanvasRenderer(100, 100, { view: buf });\n        tempRender.context = tempRender.rootContext;\n        tempRender.dontUseTransform = true;\n    }\n    if (buf.width != tilemap._layerWidth ||\n        buf.height != tilemap._layerHeight) {\n        buf.width = tilemap._layerWidth;\n        buf.height = tilemap._layerHeight;\n        modified = true;\n    }\n    var i;\n    if (!modified) {\n        for (i=0;i<layers.length;i++) {\n            if (layers[i].isModified(this._lastAnimationFrame != tilemap.animationFrame)) {\n                modified = true;\n                break;\n            }\n        }\n    }\n    this._lastAnimationFrame = tilemap.animationFrame;\n    if (modified) {\n        if (tilemap._hackRenderer) {\n            tilemap._hackRenderer(tempRender);\n        }\n        tempRender.context.clearRect(0, 0, buf.width, buf.height);\n        for (i=0;i<layers.length;i++) {\n            layers[i].clearModify();\n            layers[i].renderCanvas(tempRender);\n        }\n    }\n    this.layerTransform = this.worldTransform;\n    for (i=0;i<layers.length;i++) {\n        this.layerTransform = layers[i].worldTransform;\n        break;\n    }\n};\n\nZLayer.prototype.renderCanvas = function(renderer) {\n    this.cacheIfDirty();\n    var wt = this.layerTransform;\n    renderer.context.setTransform(\n        wt.a,\n        wt.b,\n        wt.c,\n        wt.d,\n        wt.tx * renderer.resolution,\n        wt.ty * renderer.resolution\n    );\n    var tilemap = this.tilemap;\n    renderer.context.drawImage(this.canvasBuffer, 0, 0);\n};\n\nmodule.exports = ZLayer;\n","PIXI.tilemap = {\n    ZLayer: require('./ZLayer'),\n    GraphicsLayer: require('./GraphicsLayer'),\n    RectTileLayer: require('./RectTileLayer'),\n    CompositeRectTileLayer: require('./CompositeRectTileLayer'),\n    CanvasTileRenderer: require('./CanvasTileRenderer'),\n    TileRenderer: require('./TileRenderer')\n};\n\nmodule.exports = PIXI.tilemap;\n","var shaderGenerator = {\n    fillSamplers: function(shader, maxTextures) {\n        var sampleValues = [];\n        for (var i = 0; i < maxTextures; i++)\n        {\n            sampleValues[i] = i;\n        }\n        shader.bind();\n        shader.uniforms.uSamplers = sampleValues;\n\n        var samplerSize = [];\n        for (i = 0; i < maxTextures; i++) {\n            samplerSize.push(1.0 / 2048);\n            samplerSize.push(1.0 / 2048);\n        }\n        shader.uniforms.uSamplerSize = samplerSize;\n    },\n    generateFragmentSrc: function(maxTextures, fragmentSrc) {\n        return fragmentSrc.replace(/%count%/gi, maxTextures)\n            .replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n    },\n    generateSampleSrc: function(maxTextures) {\n        var src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        src += 'if(vTextureId <= -1.0) {';\n        src += '\\n\\tcolor = shadowColor;';\n        src += '\\n}';\n\n        for (var i = 0; i < maxTextures; i++)\n        {\n            src += '\\nelse ';\n\n            if(i < maxTextures-1)\n            {\n                src += 'if(vTextureId == ' + i + '.0)';\n            }\n\n            src += '\\n{';\n            src += '\\n\\tcolor = texture2D(uSamplers['+i+'], textureCoord * uSamplerSize['+i+']);';\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n};\n\nmodule.exports = shaderGenerator;\n"]}